// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.crinali.www.archprot.domain;

import it.crinali.www.archprot.domain.Contatto;
import it.crinali.www.archprot.domain.Document;
import it.crinali.www.archprot.domain.Progetto;
import it.crinali.www.archprot.domain.Struttura;
import it.crinali.www.archprot.domain.TipoProtocollo;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Document_Roo_Finder {
    
    public static TypedQuery<Document> Document.findDocumentsByOggettoLikeOrNumeroProtocolloLikeOrTipoProtocolloOrDataProtocolloBetweenOrStrutturaOrProgettoOrContatto(String oggetto, String numeroProtocollo, TipoProtocollo tipoProtocollo, Date minDataProtocollo, Date maxDataProtocollo, Struttura struttura, Progetto progetto, Contatto contatto) {
        if (oggetto == null || oggetto.length() == 0) throw new IllegalArgumentException("The oggetto argument is required");
        oggetto = oggetto.replace('*', '%');
        if (oggetto.charAt(0) != '%') {
            oggetto = "%" + oggetto;
        }
        if (oggetto.charAt(oggetto.length() - 1) != '%') {
            oggetto = oggetto + "%";
        }
        if (numeroProtocollo == null || numeroProtocollo.length() == 0) throw new IllegalArgumentException("The numeroProtocollo argument is required");
        numeroProtocollo = numeroProtocollo.replace('*', '%');
        if (numeroProtocollo.charAt(0) != '%') {
            numeroProtocollo = "%" + numeroProtocollo;
        }
        if (numeroProtocollo.charAt(numeroProtocollo.length() - 1) != '%') {
            numeroProtocollo = numeroProtocollo + "%";
        }
        if (tipoProtocollo == null) throw new IllegalArgumentException("The tipoProtocollo argument is required");
        if (minDataProtocollo == null) throw new IllegalArgumentException("The minDataProtocollo argument is required");
        if (maxDataProtocollo == null) throw new IllegalArgumentException("The maxDataProtocollo argument is required");
        if (struttura == null) throw new IllegalArgumentException("The struttura argument is required");
        if (progetto == null) throw new IllegalArgumentException("The progetto argument is required");
        if (contatto == null) throw new IllegalArgumentException("The contatto argument is required");
        EntityManager em = Document.entityManager();
        TypedQuery<Document> q = em.createQuery("SELECT o FROM Document AS o WHERE LOWER(o.oggetto) LIKE LOWER(:oggetto)  OR LOWER(o.numeroProtocollo) LIKE LOWER(:numeroProtocollo)  OR o.tipoProtocollo = :tipoProtocollo OR o.dataProtocollo BETWEEN :minDataProtocollo AND :maxDataProtocollo  OR o.struttura = :struttura OR o.progetto = :progetto OR o.contatto = :contatto", Document.class);
        q.setParameter("oggetto", oggetto);
        q.setParameter("numeroProtocollo", numeroProtocollo);
        q.setParameter("tipoProtocollo", tipoProtocollo);
        q.setParameter("minDataProtocollo", minDataProtocollo);
        q.setParameter("maxDataProtocollo", maxDataProtocollo);
        q.setParameter("struttura", struttura);
        q.setParameter("progetto", progetto);
        q.setParameter("contatto", contatto);
        return q;
    }
    
}
