// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.crinali.www.archprot.web;

import it.crinali.www.archprot.domain.Struttura;
import it.crinali.www.archprot.web.StrutturaController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect StrutturaController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String StrutturaController.create(@Valid Struttura struttura, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, struttura);
            return "strutturas/create";
        }
        uiModel.asMap().clear();
        struttura.persist();
        return "redirect:/strutturas/" + encodeUrlPathSegment(struttura.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String StrutturaController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Struttura());
        return "strutturas/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String StrutturaController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("struttura", Struttura.findStruttura(id));
        uiModel.addAttribute("itemId", id);
        return "strutturas/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String StrutturaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("strutturas", Struttura.findStrutturaEntries(firstResult, sizeNo));
            float nrOfPages = (float) Struttura.countStrutturas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("strutturas", Struttura.findAllStrutturas());
        }
        return "strutturas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String StrutturaController.update(@Valid Struttura struttura, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, struttura);
            return "strutturas/update";
        }
        uiModel.asMap().clear();
        struttura.merge();
        return "redirect:/strutturas/" + encodeUrlPathSegment(struttura.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String StrutturaController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Struttura.findStruttura(id));
        return "strutturas/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String StrutturaController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Struttura struttura = Struttura.findStruttura(id);
        struttura.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/strutturas";
    }
    
    void StrutturaController.populateEditForm(Model uiModel, Struttura struttura) {
        uiModel.addAttribute("struttura", struttura);
    }
    
    String StrutturaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
